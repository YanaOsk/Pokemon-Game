from unittest import TestCase
from client_python.DiGraph import DiGraph
from client_python.GraphAlgo import GraphAlgo
from client_python.pokimon import pokimon
from client_python.agent import agent1
from client_python.cost import cost_line



class Teststudent_code(TestCase):

    def making_a_graph(self):
        graph = DiGraph()
        graph.add_node(node_id=0, pos=(35.18750930912026, 32.10374591260504))
        graph.add_node(node_id=1, pos=(35.18961076190476, 32.10794390084033))
        graph.add_node(node_id=2, pos=(35.19338913155771, 32.10616293613445))
        graph.add_node(node_id=3, pos=(35.19742222276029, 32.1051815882353))
        graph.add_node(node_id=4, pos=(35.1988444180791, 32.103727739495795))
        graph.add_node(node_id=5, pos=(35.19589389346247, 32.1015651394958))
        graph.add_node(node_id=6, pos=(35.20332327199354, 32.103255238655464))
        graph.add_node(node_id=7, pos=(35.2016888087167, 32.10592668571429))
        graph.add_node(node_id=8, pos=(35.20574312671509, 32.10625380168067))
        graph.add_node(node_id=9, pos=(35.20797194027441, 32.10481812605042))
        graph.add_node(node_id=10, pos=(35.21219607263922, 32.10616293613445))
        graph.add_node(node_id=11, pos=(35.21168662953995, 32.10498168403361))
        graph.add_node(node_id=12, pos=(35.21315127845036, 32.10427293277311))
        graph.add_node(node_id=13, pos=(35.21032811460856, 32.10112898487395))
        graph.add_node(node_id=14, pos=(35.20765353833737, 32.10245562184874))
        graph.add_node(node_id=15, pos=(35.204809147699756, 32.103073507563025))
        graph.add_node(node_id=16, pos=(35.20459687974173, 32.10154696638656))
        graph.add_node(node_id=17, pos=(35.20737758999193, 32.101092638655466))
        graph.add_node(node_id=18, pos=(35.20616766263115, 32.09920263529412))
        graph.add_node(node_id=19, pos=(35.204257251008876, 32.09980234789916))
        graph.add_node(node_id=20, pos=(35.199353861178366, 32.100474752941174))
        graph.add_node(node_id=21, pos=(35.19084191606134, 32.10134706218487))
        graph.add_node(node_id=22, pos=(35.18787016464891, 32.10347331596639))
        graph.add_node(node_id=23, pos=(35.18950462792575, 32.10519976134454))
        graph.add_node(node_id=24, pos=(35.191924482647295, 32.104200240336134))
        graph.add_node(node_id=25, pos=(35.195575491525425, 32.10349148907563))
        graph.add_node(node_id=26, pos=(35.18806120581114, 32.099711482352944))
        graph.add_node(node_id=27, pos=(35.18725458757062, 32.109306884033614))
        graph.add_node(node_id=28, pos=(35.19483255367231, 32.10943409579832))
        graph.add_node(node_id=29, pos=(35.19243392574657, 32.10854361344538))
        graph.add_node(node_id=30, pos=(35.194195749798226, 32.10774399663865))
        graph.add_node(node_id=31, pos=(35.199523675544796, 32.10908880672269))
        graph.add_node(node_id=32, pos=(35.20115813882163, 32.10750774621849))
        graph.add_node(node_id=33, pos=(35.20476669410815, 32.108579959663864))
        graph.add_node(node_id=34, pos=(35.20769599192897, 32.107816689075634))
        graph.add_node(node_id=35, pos=(35.206358703793384, 32.10739870756303))
        graph.add_node(node_id=36, pos=(35.2099248054883, 32.10759861176471))
        graph.add_node(node_id=37, pos=(35.21119841323648, 32.10794390084033))
        graph.add_node(node_id=38, pos=(35.21217484584342, 32.10854361344538))
        graph.add_node(node_id=39, pos=(35.212620608555284, 32.10719880336134))

        graph.add_edge(0, 1, 1.0835435956906543)
        graph.add_edge(0, 22, 0.3433607693232187)
        graph.add_edge(1, 0, 1.260431259778731)
        graph.add_edge(1, 2, 1.0123064430949418)
        graph.add_edge(2, 1, 1.7247835531480924)
        graph.add_edge(2, 3, 1.9578538886727144)
        graph.add_edge(2, 30, 1.3013251948418596)
        graph.add_edge(3, 2, 1.827752726467304)
        graph.add_edge(3, 4, 1.9908441205772092)
        graph.add_edge(4, 3, 1.6284986709004998)
        graph.add_edge(4, 5, 1.1712767410444496)
        graph.add_edge(5, 4, 1.0131908397905627)
        graph.add_edge(5, 6, 1.9446655683736058)
        graph.add_edge(5, 25, 1.3874752630258282)
        graph.add_edge(6, 5, 1.560477950671761)
        graph.add_edge(6, 7, 1.5464614947923163)
        graph.add_edge(6, 15, 1.134232756788375)
        graph.add_edge(7, 32, 1.4794484033472592)
        graph.add_edge(7, 6, 1.9337075379943074)
        graph.add_edge(7, 8, 1.7158358413722645)
        graph.add_edge(8, 35, 1.130370301760947)
        graph.add_edge(8, 7, 1.228339449624865)
        graph.add_edge(8, 9, 1.2827103384274627)
        graph.add_edge(9, 8, 1.2340510488941445)
        graph.add_edge(9, 10, 1.3573438076507416)
        graph.add_edge(10, 39, 0.5657504395294557)
        graph.add_edge(10, 9, 1.867530854380139)
        graph.add_edge(10, 11, 1.7841169947193596)
        graph.add_edge(11, 10, 1.8878405720440825)
        graph.add_edge(11, 12, 1.6627775783718608)
        graph.add_edge(12, 11, 1.668568602308967)
        graph.add_edge(12, 13, 1.3618252445279904)
        graph.add_edge(13, 12, 1.2199921006106256)
        graph.add_edge(13, 14, 1.8985651437927196)
        graph.add_edge(14, 17, 1.30672526242022)
        graph.add_edge(14, 13, 1.7334336008841222)
        graph.add_edge(14, 15, 1.996989332206076)
        graph.add_edge(15, 16, 1.8312618692355023)
        graph.add_edge(15, 6, 1.32134381322386)
        graph.add_edge(15, 14, 1.350338856626182)
        graph.add_edge(16, 17, 1.275567351461944)
        graph.add_edge(16, 19, 1.6032568850637063)
        graph.add_edge(16, 15, 1.0913562448992056)
        graph.add_edge(17, 16, 1.380583524414519)
        graph.add_edge(17, 18, 1.895783214212016)
        graph.add_edge(17, 14, 1.280709814240381)
        graph.add_edge(18, 17, 1.3638435750384605)
        graph.add_edge(18, 19, 1.5927402586330097)
        graph.add_edge(19, 16, 1.2406524918828385)
        graph.add_edge(19, 18, 1.809592242888764)
        graph.add_edge(19, 20, 1.763756279531104)
        graph.add_edge(20, 19, 1.4313420158759202)
        graph.add_edge(20, 21, 1.1472916434588263)
        graph.add_edge(21, 20, 1.4108678669726202)
        graph.add_edge(21, 22, 1.8457046682315756)
        graph.add_edge(22, 0, 0.44931229584749066)
        graph.add_edge(22, 21, 1.7149845299642799)
        graph.add_edge(22, 23, 1.0956665867713435)
        graph.add_edge(23, 22, 1.20813159861614)
        graph.add_edge(23, 24, 1.9244056090500044)
        graph.add_edge(24, 23, 1.366805158502689)
        graph.add_edge(24, 25, 1.9409302255351337)
        graph.add_edge(25, 5, 1.5302621186016696)
        graph.add_edge(25, 24, 1.526540220474201)
        graph.add_edge(25, 26, 1.8867184054487574)
        graph.add_edge(26, 25, 1.886708122591454)
        graph.add_edge(26, 27, 1.5971039511349687)
        graph.add_edge(27, 26, 1.814170129663763)
        graph.add_edge(27, 28, 1.5757658838715223)
        graph.add_edge(28, 27, 1.54852926169781)
        graph.add_edge(28, 29, 1.5978560015720404)
        graph.add_edge(28, 30, 1.531973599491279)
        graph.add_edge(29, 28, 1.3870892671587354)
        graph.add_edge(29, 30, 1.320315386625936)
        graph.add_edge(30, 2, 1.4857584689137417)
        graph.add_edge(30, 28, 1.0201144759650802)
        graph.add_edge(30, 29, 1.1134294319752716)
        graph.add_edge(30, 31, 1.5505858880979928)
        graph.add_edge(31, 32, 1.3935717941599135)
        graph.add_edge(31, 30, 1.961523838549256)
        graph.add_edge(32, 33, 1.3524096594998078)
        graph.add_edge(32, 7, 1.1072198955013588)
        graph.add_edge(32, 31, 1.9566531707928996)
        graph.add_edge(33, 32, 1.633561638256882)
        graph.add_edge(33, 34, 1.8111759305323711)
        graph.add_edge(33, 35, 1.097054390982287)
        graph.add_edge(34, 33, 1.304814668643914)
        graph.add_edge(34, 35, 1.665073852199095)
        graph.add_edge(35, 33, 1.1355123315390185)
        graph.add_edge(35, 34, 1.8300333272322125)
        graph.add_edge(35, 36, 1.8365475807719966)
        graph.add_edge(35, 8, 1.180655161883633)
        graph.add_edge(36, 35, 1.9573831475558512)
        graph.add_edge(36, 37, 1.1918019631569365)
        graph.add_edge(37, 36, 1.1439761461732751)
        graph.add_edge(37, 38, 1.1004358793841362)
        graph.add_edge(37, 39, 0.8728663213495164)
        graph.add_edge(38, 37, 1.493642552290904)
        graph.add_edge(38, 39, 1.6111110787665157)
        graph.add_edge(39, 37, 0.9832912320283205)
        graph.add_edge(39, 38, 1.6032641568791934)
        graph.add_edge(39, 10, 0.7421323463930005)

        return graph

    def test_cost(self):
        graph = self.making_a_graph()
        graphAlgo = GraphAlgo()
        graphAlgo = GraphAlgo(graph)

        pok = pokimon(value=5.0, type=-1, pos=(35.20392770907119, 32.10833067124629))
        agen = agent1(0, 0.0, 6, -1, 1.0, (35.20332327199354, 32.103255238655464))
        self.assertEqual(cost_line.cost(pok, agen, graphAlgo), 1.202376239179253)  # add assertion here



